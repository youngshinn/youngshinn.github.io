---
layout: single
title:  "first post"
---

Docker Swarm: 간단하고 강력한 컨테이너 오케스트레이션 도구

1. Docker Swarm 소개

Docker Swarm은 Docker에서 제공하는 컨테이너 오케스트레이션 도구입니다. Kubernetes와 같이 클러스터 환경에서 컨테이너를 관리하고 배포할 수 있도록 설계되었으며, Docker와의 긴밀한 통합으로 사용이 간편합니다.

주요 기능:

간단한 설정과 사용법

내장된 로드 밸런싱

자동화된 스케일링과 복구

비밀번호 기반 클러스터 보안

Kubernetes와의 차이점:

단순성: Docker Swarm은 Kubernetes보다 설정과 관리가 간단합니다.

기능: Kubernetes는 복잡한 환경에서 더 다양한 기능을 제공합니다.

Docker Swarm은 간단한 워크로드와 소규모 프로젝트에 적합하며, 빠르게 컨테이너 오케스트레이션을 시작하려는 개발자들에게 적합한 도구입니다.

2. Docker Swarm 환경 설정

Docker Swarm을 시작하려면 클러스터를 초기화하고 Manager 노드와 Worker 노드를 설정해야 합니다.

2.1. Docker Swarm 초기화

docker swarm init

이 명령어를 실행하면 현재 노드가 Manager 노드로 설정됩니다. 이후 Worker 노드를 추가할 수 있는 토큰이 제공됩니다.

2.2. Worker 노드 추가

Worker 노드를 클러스터에 추가하려면 Manager 노드에서 제공된 토큰을 사용합니다.

docker swarm join --token <토큰> <Manager_IP>:2377

2.3. 클러스터 상태 확인

현재 클러스터 상태와 노드 정보를 확인합니다.

docker node ls

3. Docker Swarm 서비스 배포

Docker Swarm에서 서비스를 배포하려면 docker service 명령어를 사용합니다.

3.1. 간단한 웹 애플리케이션 배포

다음 명령어는 Nginx를 사용하여 간단한 웹 서비스를 배포합니다.

docker service create --name my-web --publish 8080:80 nginx

--name: 서비스 이름 지정

--publish: 포트 매핑 (호스트:컨테이너)

3.2. 배포된 서비스 확인

docker service ls

3.3. 서비스 제거

배포된 서비스를 제거하려면 아래 명령어를 사용합니다.

docker service rm my-web

4. 서비스 스케일링

Docker Swarm은 간단한 명령으로 서비스 스케일링을 지원합니다.

4.1. 서비스 스케일링

다음 명령어는 실행 중인 컨테이너 인스턴스를 5개로 확장합니다.

docker service scale my-web=5

4.2. 스케일링 결과 확인

스케일링 후 서비스 상태를 확인합니다.

docker service ps my-web

5. Docker Swarm의 로드 밸런싱

Docker Swarm은 내장 로드 밸런서를 통해 트래픽을 클러스터 내의 모든 컨테이너로 분산시킵니다. 클러스터의 어느 노드에서나 서비스에 접근할 수 있으며, Swarm이 자동으로 트래픽을 관리합니다.

예를 들어, my-web 서비스의 8080번 포트에 요청을 보내면 Docker Swarm은 이를 모든 컨테이너에 분산합니다.

6. Docker Swarm과 DevOps

Docker Swarm은 DevOps 환경에서 CI/CD 파이프라인에 쉽게 통합될 수 있습니다. Jenkins, GitHub Actions와 같은 도구와 연동하여 컨테이너 배포를 자동화할 수 있습니다.

사용 사례:

마이크로서비스 아키텍처 배포

소규모 팀의 빠른 개발 및 테스트 환경 구축

단순한 로드 밸런싱이 필요한 애플리케이션

7. 실습 코드 및 스크린샷

7.1. Docker Compose와 Swarm 통합

Docker Compose 파일을 사용해 여러 서비스를 Swarm에 배포할 수 있습니다.

docker-compose.yml 예제:

version: '3.8'
services:
  web:
    image: nginx
    ports:
      - "8080:80"
  redis:
    image: redis

Swarm에서 배포하려면 다음 명령어를 실행합니다:

docker stack deploy -c docker-compose.yml mystack

7.2. 결과 스크린샷

스크린샷을 통해 배포된 서비스 상태와 동작 과정을 보여줍니다.

8. 결론

Docker Swarm은 간단하고 강력한 컨테이너 오케스트레이션 도구로, 소규모 프로젝트나 빠른 배포를 원하는 개발자에게 적합합니다. Kubernetes보다 사용이 간편하지만, 대규모 프로젝트에서는 기능의 한계가 있을 수 있습니다.

추천 학습 자료:

Docker 공식 문서

Docker Compose와 Swarm 통합 가이드
